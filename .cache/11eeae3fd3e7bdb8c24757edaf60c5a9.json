{"dependencies":[{"name":"./from-string-and-format","loc":{"line":1,"column":42}},{"name":"../utils/hooks","loc":{"line":2,"column":22}},{"name":"../utils/deprecate","loc":{"line":3,"column":26}},{"name":"./parsing-flags","loc":{"line":4,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configFromISO = configFromISO;\nexports.configFromRFC2822 = configFromRFC2822;\nexports.configFromString = configFromString;\n\nvar _fromStringAndFormat = require(\"./from-string-and-format\");\n\nvar _hooks = require(\"../utils/hooks\");\n\nvar _deprecate = require(\"../utils/deprecate\");\n\nvar _parsingFlags = require(\"./parsing-flags\");\n\nvar _parsingFlags2 = _interopRequireDefault(_parsingFlags);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// iso 8601 regex\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\nvar isoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/], ['YYYYMMDD', /\\d{8}/],\n// YYYYMM is NOT allowed by the standard\n['GGGG[W]WWE', /\\d{4}W\\d{3}/], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/]];\n\n// iso time formats and regexes\nvar isoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]];\n\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n// date from iso format\nfunction configFromISO(config) {\n  var i,\n      l,\n      string = config._i,\n      match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n      allowTime,\n      dateFormat,\n      timeFormat,\n      tzFormat;\n\n  if (match) {\n    (0, _parsingFlags2.default)(config).iso = true;\n\n    for (i = 0, l = isoDates.length; i < l; i++) {\n      if (isoDates[i][1].exec(match[1])) {\n        dateFormat = isoDates[i][0];\n        allowTime = isoDates[i][2] !== false;\n        break;\n      }\n    }\n    if (dateFormat == null) {\n      config._isValid = false;\n      return;\n    }\n    if (match[3]) {\n      for (i = 0, l = isoTimes.length; i < l; i++) {\n        if (isoTimes[i][1].exec(match[3])) {\n          // match[2] should be 'T' or space\n          timeFormat = (match[2] || ' ') + isoTimes[i][0];\n          break;\n        }\n      }\n      if (timeFormat == null) {\n        config._isValid = false;\n        return;\n      }\n    }\n    if (!allowTime && timeFormat != null) {\n      config._isValid = false;\n      return;\n    }\n    if (match[4]) {\n      if (tzRegex.exec(match[4])) {\n        tzFormat = 'Z';\n      } else {\n        config._isValid = false;\n        return;\n      }\n    }\n    config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n    (0, _fromStringAndFormat.configFromStringAndFormat)(config);\n  } else {\n    config._isValid = false;\n  }\n}\n\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\nvar basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d?\\d\\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(?:\\d\\d)?\\d\\d\\s)(\\d\\d:\\d\\d)(\\:\\d\\d)?(\\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\\d{4}))$/;\n\n// date and time from ref 2822 format\nfunction configFromRFC2822(config) {\n  var string, match, dayFormat, dateFormat, timeFormat, tzFormat;\n  var timezones = {\n    ' GMT': ' +0000',\n    ' EDT': ' -0400',\n    ' EST': ' -0500',\n    ' CDT': ' -0500',\n    ' CST': ' -0600',\n    ' MDT': ' -0600',\n    ' MST': ' -0700',\n    ' PDT': ' -0700',\n    ' PST': ' -0800'\n  };\n  var military = 'YXWVUTSRQPONZABCDEFGHIKLM';\n  var timezone, timezoneIndex;\n\n  string = config._i.replace(/\\([^\\)]*\\)|[\\n\\t]/g, ' ') // Remove comments and folding whitespace\n  .replace(/(\\s\\s+)/g, ' ') // Replace multiple-spaces with a single space\n  .replace(/^\\s|\\s$/g, ''); // Remove leading and trailing spaces\n  match = basicRfcRegex.exec(string);\n\n  if (match) {\n    dayFormat = match[1] ? 'ddd' + (match[1].length === 5 ? ', ' : ' ') : '';\n    dateFormat = 'D MMM ' + (match[2].length > 10 ? 'YYYY ' : 'YY ');\n    timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');\n\n    // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n    if (match[1]) {\n      // day of week given\n      var momentDate = new Date(match[2]);\n      var momentDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][momentDate.getDay()];\n\n      if (match[1].substr(0, 3) !== momentDay) {\n        (0, _parsingFlags2.default)(config).weekdayMismatch = true;\n        config._isValid = false;\n        return;\n      }\n    }\n\n    switch (match[5].length) {\n      case 2:\n        // military\n        if (timezoneIndex === 0) {\n          timezone = ' +0000';\n        } else {\n          timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;\n          timezone = (timezoneIndex < 0 ? ' -' : ' +') + ('' + timezoneIndex).replace(/^-?/, '0').match(/..$/)[0] + '00';\n        }\n        break;\n      case 4:\n        // Zone\n        timezone = timezones[match[5]];\n        break;\n      default:\n        // UT or +/-9999\n        timezone = timezones[' GMT'];\n    }\n    match[5] = timezone;\n    config._i = match.splice(1).join('');\n    tzFormat = ' ZZ';\n    config._f = dayFormat + dateFormat + timeFormat + tzFormat;\n    (0, _fromStringAndFormat.configFromStringAndFormat)(config);\n    (0, _parsingFlags2.default)(config).rfc2822 = true;\n  } else {\n    config._isValid = false;\n  }\n}\n\n// date from iso format or fallback\nfunction configFromString(config) {\n  var matched = aspNetJsonRegex.exec(config._i);\n\n  if (matched !== null) {\n    config._d = new Date(+matched[1]);\n    return;\n  }\n\n  configFromISO(config);\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return;\n  }\n\n  configFromRFC2822(config);\n  if (config._isValid === false) {\n    delete config._isValid;\n  } else {\n    return;\n  }\n\n  // Final attempt, use Input Fallback\n  _hooks.hooks.createFromInputFallback(config);\n}\n\n_hooks.hooks.createFromInputFallback = (0, _deprecate.deprecate)('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {\n  config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n});\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(extendedIsoRegex, \"extendedIsoRegex\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(basicIsoRegex, \"basicIsoRegex\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(tzRegex, \"tzRegex\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(isoDates, \"isoDates\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(isoTimes, \"isoTimes\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(aspNetJsonRegex, \"aspNetJsonRegex\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(configFromISO, \"configFromISO\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(basicRfcRegex, \"basicRfcRegex\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(configFromRFC2822, \"configFromRFC2822\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n\n  __REACT_HOT_LOADER__.register(configFromString, \"configFromString\", \"/Users/dan/code/kickstart/node_modules/moment/src/lib/create/from-string.js\");\n}();\n\n;"},"hash":"da5e2008dd27b4cce7ad774ea7ece5c3"}